USE hectre;

CREATE TABLE IF NOT EXISTS AppVersion (
  id INT NOT NULL PRIMARY KEY,
  appVersion VARCHAR(100) NOT NULL UNIQUE,
  dbVersion VARCHAR(100) NOT NULL UNIQUE,
  upgradeMode VARCHAR(100) NOT NULL,
  versionStatus VARCHAR(20) NOT NULL DEFAULT 'Active',
  updatedOn DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS Tenant (
  id INT NOT NULL PRIMARY KEY,
  tenantName VARCHAR(100) NOT NULL UNIQUE,
  appVersionId INT NOT NULL,
  tenantStatus VARCHAR(20) NOT NULL DEFAULT 'Active',
  updatedOn DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  CONSTRAINT tenantAppVersionFK FOREIGN KEY (appVersionId)
    REFERENCES AppVersion (id)
);

CREATE TABLE IF NOT EXISTS User (
  id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
  firstName VARCHAR(50) NOT NULL UNIQUE,
  lastName VARCHAR(50) NOT NULL UNIQUE,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(50) NOT NULL,
  userStatus VARCHAR(20) NOT NULL DEFAULT 'Active',
  updatedBy INT,
  updatedOn DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  CONSTRAINT userUpdatedByFK FOREIGN KEY (updatedBy)
    REFERENCES User (id)
);

CREATE TABLE IF NOT EXISTS Study (
  id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
  tenantId INT NOT NULL,
  studyName VARCHAR(80) NOT NULL UNIQUE,
  studyTitle VARCHAR(255) NOT NULL,
  studyStatus VARCHAR(20) NOT NULL DEFAULT 'Active',
  updatedBy INT NOT NULL,
  updatedOn DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  UNIQUE KEY studyNameTenantUK (tenantId, studyName),
  CONSTRAINT studyTenantFK FOREIGN KEY (tenantId)
    REFERENCES tenant(id),
  CONSTRAINT studyUpdatedByFK FOREIGN KEY (updatedBy)
    REFERENCES User (id)
);

CREATE TABLE IF NOT EXISTS StudyVersion (
  id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
  studyId INT NOT NULL,
  studyVersion VARCHAR(10) NOT NULL,
  versionStatus VARCHAR(20) NOT NULL DEFAULT 'Active',
  updatedBy INT NOT NULL,
  updatedOn DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  UNIQUE KEY studyVersionUK (studyId, studyVersion),
  CONSTRAINT versionStudyFK FOREIGN KEY (studyId)
    REFERENCES Study (id),
  CONSTRAINT studyVersionUpdatedByFK FOREIGN KEY (updatedBy)
    REFERENCES User (id)
);

CREATE TABLE IF NOT EXISTS StudyEvent (
  id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
  studyId INT NOT NULL,
  eventCode VARCHAR(4) NOT NULL,
  eventName VARCHAR(50) NOT NULL,
  eventOrder INT NOT NULL,
  duration INT NOT NULL,
  durationUnit VARCHAR(20) NOT NULL,
  eventStatus VARCHAR(20) NOT NULL DEFAULT 'Active',
  updatedBy INT NOT NULL,
  updatedOn DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  UNIQUE KEY studyEventNameUK (studyId, eventName),
  UNIQUE KEY studyEventCodeUK (studyId, eventCode),
  CONSTRAINT eventStudyFK FOREIGN KEY studyId)
    REFERENCES Study(id),
  CONSTRAINT eventUpdatedByFK FOREIGN KEY (updatedBy)
    REFERENCES User(id)
);

CREATE TABLE IF NOT EXISTS StudyConsent (
  id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
  studyId INT NOT NULL,
  versionId VARCHAR(10) NOT NULL,
  url VARCHAR(500) NOT NULL,
  consentStatus VARCHAR(20) NOT NULL DEFAULT 'Active',
  updatedBy INT NOT NULL,
  updatedOn DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  UNIQUE KEY consentStudyVersionUK (studyId, versionId),
  CONSTRAINT consentStudyFK FOREIGN KEY (studyId)
    REFERENCES Study(id),
  CONSTRAINT consentStudyVersionFK FOREIGN KEY (versionId)
    REFERENCES StudyVersion(id),
  CONSTRAINT consentUpdatedByFK FOREIGN KEY (UpdatedBy)
    REFERENCES User (id)
);

CREATE TABLE IF NOT EXISTS Site (
  id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
  tenantId INT NOT NULL,
  siteName VARCHAR(200) NOT NULL,
  siteStatus VARCHAR(20) NOT NULL DEFAULT 'Active',
  updatedBy INT NOT NULL,
  updatedOn DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  UNIQUE KEY siteNameTenantUK (tenantId, siteName),
  CONSTRAINT siteTenantFK FOREIGN KEY (tenantId)
    REFERENCES tenant (id),
  CONSTRAINT siteUpdatedByFK FOREIGN KEY (updatedBy)
    REFERENCES User(id)
);

CREATE TABLE IF NOT EXISTS siteRegisteredStudy (
  id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
  studyId INT NOT NULL,
  versionId INT NOT NULL,
  siteId INT NOT NULL,
  registrationDate DATETIME NOT NULL,
  isCurrent VARCHAR(1) NOT NULL,
  siteStatus VARCHAR(20) NOT NULL DEFAULT 'Active',
  updatedBy INT NOT NULL,
  updatedOn DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  CONSTRAINT srsStudyFK FOREIGN KEY (studyId)
    REFERENCES Study(id),
  CONSTRAINT srsVersionFK FOREIGN KEY (versionId)
    REFERENCES StudyVersion(id),
  CONSTRAINT srsSiteFK FOREIGN KEY (siteId)
    REFERENCES Site(id),
  CONSTRAINT srsUpdatedByFK FOREIGN KEY (updatedBy)
    REFERENCES User(id)
);

CREATE TABLE IF NOT EXISTS tenantAddress (
  id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
  tenantId INT NOT NULL,
  url VARCHAR(500) NOT NULL,
  type VARCHAR(20) NOT NULL,
  isPrimary VARCHAR(3) NOT NULL,
  addressStatus VARCHAR(20) NOT NULL DEFAULT 'Active',
  updatedBy INT NOT NULL,
  updatedOn DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  CONSTRAINT tenantAddressFK FOREIGN KEY (tenantId)
    REFERENCES Tenant (id),
  CONSTRAINT tenantAddressUpdatedByFK FOREIGN KEY (updatedBy)
    REFERENCES User (id)
);

CREATE TABLE IF NOT EXISTS tenantUser (
  id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
  tenantId INT NOT NULL,
  userId INT NOT NULL,
  lastLoginDate DATETIME,
  tenantUserStatus VARCHAR(20) NOT NULL DEFAULT 'Active',
  updatedBy INT NOT NULL,
  updatedOn DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  UNIQUE KEY tenantUserUK (tenantId, userId),
  CONSTRAINT tenantUserTenantFK FOREIGN KEY (tenantId)
    REFERENCES Tenant (id),
  CONSTRAINT tenantUserFK FOREIGN KEY (userId)
    REFERENCES User (id),
  CONSTRAINT tenantUserUpdatedByFK FOREIGN KEY (updatedBy)
    REFERENCES User (id)
);

CREATE TABLE IF NOT EXISTS tenantStudy (
  id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
  tenantId INT NOT NULL,
  studyId INT NOT NULL,
  updatedBy INT NOT NULL,
  updatedOn DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  UNIQUE KEY tenantStudyUK (tenantId, studyId),
  CONSTRAINT tenantStudyTenantFK FOREIGN KEY (tenantId)
    REFERENCES Tenant (id),
  CONSTRAINT tenantStudyFK FOREIGN KEY (studyId)
    REFERENCES Study (id),
  CONSTRAINT tenantStudyUptedByFK FOREIGN KEY (updatedBy)
    REFERENCES User (id)
);
CREATE TABLE IF NOT EXISTS tenantSite (
  id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
  tenantId INT NOT NULL,
  siteId INT NOT NULL,
  updatedBy INT NOT NULL,
  updatedOn DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  UNIQUE KEY tenantSiteUK (tenantId, siteId),
  CONSTRAINT tenantSiteTenantFK FOREIGN KEY (tenantId)
    REFERENCES Tenant (id),
  CONSTRAINT tenantSiteFK FOREIGN KEY (siteId)
    REFERENCES Site (SIT_ID),
  CONSTRAINT tenantSiteUpdatedByFK FOREIGN KEY (updatedBy)
    REFERENCES User (id)
);

CREATE TABLE IF NOT EXISTS PID_COUNTER_ASSIGNMENTS (
  PCA_SRS_ID INT NOT NULL PRIMARY KEY,
  PCA_PID_MIN INT,
  PCA_PID_MAX INT,
  PCA_PID_LAST INT NOT NULL,
  PCA_SPID_MIN INT,
  PCA_SPID_MAX INT,
  PCA_SPID_LAST INT NOT NULL,
  PCA_LAST_CHANGE_DT DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  CONSTRAINT PCA_SRS_ID_FK FOREIGN KEY (PCA_SRS_ID)
    REFERENCES SITE_REGISTERED_STUDIES (SRS_ID)
);

CREATE TABLE IF NOT EXISTS SCREENING (
  SCN_ID INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
  tenantId INT NOT NULL,
  SCN_MRN VARCHAR(50),
  SCN_FNAME VARCHAR(200) NOT NULL,
  SCN_MI VARCHAR(10),
  SCN_LNAME VARCHAR(200) NOT NULL,
  SCN_GENDER_CURR VARCHAR(50) NOT NULL,
  SCN_DOB DATETIME NOT NULL,
  SCN_SCREEN_DT DATETIME NOT NULL,
  SCN_SCREEN_STATUS VARCHAR(20) NOT NULL,
  SCN_LAST_USR_ID INT NOT NULL,
  SCN_LAST_CHANGE_DT DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  UNIQUE KEY SCN_TNT_MRN_UK (tenantId, mrn),
  CONSTRAINT SCN_TNT_FK FOREIGN KEY (tenantId)
    REFERENCES TENANTS (TNT_ID),
  CONSTRAINT SCN_LAST_USR_FK FOREIGN KEY (updatedBy)
    REFERENCES User (id)
);

CREATE TABLE IF NOT EXISTS PARTICIPANTS (
  PAT_ID INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
  PAT_TNT_ID INT NOT NULL,
  PAT_MRN VARCHAR(50),
  PAT_PID VARCHAR(50) NOT NULL,
  PAT_FNAME VARCHAR(200) NOT NULL,
  PAT_MI VARCHAR(10),
  PAT_LNAME VARCHAR(200) NOT NULL,
  PAT_GENDER_CURR VARCHAR(50) NOT NULL,
  PAT_DOB DATETIME NOT NULL,
  PAT_STATUS VARCHAR(20) NOT NULL DEFAULT 'Active',
  PAT_LAST_USR_ID INT NOT NULL,
  PAT_LAST_CHANGE_DT DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  UNIQUE KEY PAT_TNT_MRN_UK (PAT_TNT_ID, PAT_MRN),
  UNIQUE KEY PAT_TNT_PID_UK (PAT_TNT_ID, PAT_PID),
  CONSTRAINT PAT_TNT_FK  FOREIGN KEY (PAT_TNT_ID)
    REFERENCES TENANTS (TNT_ID),
  CONSTRAINT PAT_LAST_USR_FK FOREIGN KEY (PAT_LAST_USR_ID)
	REFERENCES User (id)
);

CREATE TABLE IF NOT EXISTS STUDY_SITE_PARTICIPANTS (
  SPT_ID INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
  SPT_PAT_ID INT,
  SPT_SCN_ID INT NOT NULL,
  SPT_SIT_ID INT NOT NULL,
  SPT_STU_ID INT NOT NULL,
  SPT_SPID VARCHAR(20),
  SPT_ENROLL_DT DATETIME,
  SPT_ENROLL_STATUS VARCHAR(50) NOT NULL,
  SPT_ENROLL_STATUS_DT DATETIME NOT NULL,
  SPT_LAST_USR_ID INT NOT NULL,
  SPT_LAST_CHANGE_DT DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  CONSTRAINT SPT_PAT_FK FOREIGN KEY (SPT_PAT_ID)
    REFERENCES PARTICIPANTS (PAT_ID),
  CONSTRAINT SPT_SCN_FK FOREIGN KEY (SPT_SCN_ID)
    REFERENCES SCREENING (SCN_ID),
  CONSTRAINT SPT_SIT_FK FOREIGN KEY (SPT_SIT_ID)
    REFERENCES SITES (SIT_ID),
  CONSTRAINT SPT_STU_FK FOREIGN KEY (SPT_STU_ID)
    REFERENCES STUDIES (id),
  CONSTRAINT SPT_LAST_USR_FK FOREIGN KEY (SPT_LAST_USR_ID)
    REFERENCES User (id)
);

CREATE TABLE IF NOT EXISTS PARTICIPANT_ENCOUNTERS (
  PEN_ID INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
  PEN_SPT_ID INT NOT NULL,
  PEN_ENC_SVE_ID INT NOT NULL,
  PEN_EVENT_NAME VARCHAR(50) NOT NULL,
  PEN_EVENT_UNSCH VARCHAR(20),
  PEN_ENC_DT DATETIME NOT NULL,
  PEN_ENC_REASON VARCHAR(200),
  PEN_LAST_USR_ID INT NOT NULL,
  PEN_LAST_CHANGE_DT DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  CONSTRAINT PEN_SPT_FK FOREIGN KEY (PEN_SPT_ID)
    REFERENCES STUDY_SITE_PARTICIPANTS (SPT_ID),
  CONSTRAINT PEN_LAST_USR_FK FOREIGN KEY (PEN_LAST_USR_ID)
    REFERENCES User (id)
);

CREATE TABLE IF NOT EXISTS PARTICIPANT_STUDY_CONSENTS (
  PSC_ID INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
  PSC_SPT_ID INT NOT NULL,
  PSC_SCO_ID INT NOT NULL,
  PSC_LAST_USR_ID INT NOT NULL,
  PSC_LAST_CHANGE_DT DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  CONSTRAINT PSC_SPT_FK FOREIGN KEY (PSC_SPT_ID)
    REFERENCES STUDY_SITE_PARTICIPANTS (SPT_ID),
  CONSTRAINT PSC_SCO_FK FOREIGN KEY (PSC_SCO_ID)
    REFERENCES STUDY_CONSENTS (SCO_ID),
  CONSTRAINT PSC_LAST_USR_FK FOREIGN KEY (PSC_LAST_USR_ID)
    REFERENCES User (id)
);

CREATE TABLE IF NOT EXISTS DATA_CAPTURE_STEPS (
  DCS_ID INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
  DCS_STEP_CD VARCHAR(20) UNIQUE NOT NULL,
  DCS_DISPLAY_NAME VARCHAR(50) NOT NULL,
  DCS_DESC VARCHAR(500) NOT NULL,
  DCS_LAST_USR_ID INT NOT NULL,
  DCS_LAST_CHANGE_DT DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  CONSTRAINT DCS_LAST_USR_FK FOREIGN KEY (DCS_LAST_USR_ID)
    REFERENCES User (id)
);

CREATE TABLE IF NOT EXISTS TENANT_STEPS (
  TSE_ID INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
  TSE_TNT_ID INT NOT NULL,
  TSE_STEP_CD VARCHAR(20) NOT NULL,
  TSE_LAST_USR_ID INT NOT NULL,
  TSE_LAST_CHANGE_DT DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  UNIQUE KEY TSE_TNT_STEP_UK (TSE_TNT_ID, TSE_STEP_CD),
  CONSTRAINT TSE_TNT_FK FOREIGN KEY (TSE_TNT_ID)
    REFERENCES TENANTS (TNT_ID),
  CONSTRAINT TSE_STEP_FK FOREIGN KEY (TSE_STEP_CD)
    REFERENCES DATA_CAPTURE_STEPS (DCS_STEP_CD),
  CONSTRAINT TSE_LAST_USR_FK FOREIGN KEY (TSE_LAST_USR_ID)
    REFERENCES User (id)
);

CREATE TABLE IF NOT EXISTS STUDY_EVENT_STEPS (
  SVS_ID INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
  SVS_STU_ID INT NOT NULL,
  SVS_EVENT_NAME VARCHAR(50) NOT NULL,
  SVS_GROUP_NAME VARCHAR(50),
  SVS_STEP_CD VARCHAR(20),
  SVS_GROUP_ID INT,
  SVS_LAST_USR_ID INT NOT NULL,
  SVS_LAST_CHANGE_DT DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  CONSTRAINT SVS_STU_FK FOREIGN KEY (SVS_STU_ID)
    REFERENCES STUDIES (id),
  CONSTRAINT SVS_STU_EVENT_FK FOREIGN KEY (SVS_STU_ID, SVS_EVENT_NAME)
    REFERENCES STUDY_EVENTS (SEV_STU_ID, SEV_EVENT_NAME),
  CONSTRAINT SVS_STEP_FK FOREIGN KEY (SVS_STEP_CD)
    REFERENCES DATA_CAPTURE_STEPS (DCS_STEP_CD),
  CONSTRAINT SVS_GROUP_FK FOREIGN KEY (SVS_GROUP_ID)
    REFERENCES STUDY_EVENT_STEPS (SVS_ID),
  CONSTRAINT SVS_LAST_USR_FK FOREIGN KEY (SVS_LAST_USR_ID)
    REFERENCES User (id)
);

CREATE TABLE IF NOT EXISTS ENCOUNTER_DATA_SUMMARY (
  EDS_PEN_ID INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
  EDS_ISSUES_CNT INT NOT NULL,
  EDS_STATUS VARCHAR(20) NOT NULL,
  EDS_LAST_CHANGE_DT DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  CONSTRAINT EDS_PEN_FK FOREIGN KEY (EDS_PEN_ID)
    REFERENCES PARTICIPANT_ENCOUNTERS (PEN_ID)
);

CREATE TABLE IF NOT EXISTS ENCOUNTER_DATA_DETAILS (
  EDD_ID INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
  EDD_STEP_CD VARCHAR(20) NOT NULL,
  EDD_ISSUES_CNT INT NOT NULL,
  EDD_STEP_STATUS VARCHAR(20) NOT NULL,
  EDD_LAST_CHANGE_DT DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  CONSTRAINT EDD_STEP_FK FOREIGN KEY (EDD_STEP_CD)
    REFERENCES DATA_CAPTURE_STEPS (DCS_STEP_CD)
);

CREATE TABLE IF NOT EXISTS PARTICIPANT_DEMOGRAPHICS (
  PDG_ID INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
  PDG_SPT_ID INT NOT NULL,
  PDG_GENDER_BIRTH VARCHAR(20) NOT NULL,
  PDG_RACE VARCHAR(50) NOT NULL,
  PDG_ETHNICITY VARCHAR(20) NOT NULL,
  PDG_COH_STATUS VARCHAR(20) NOT NULL,
  PDG_COH_STATUS_DT DATETIME NOT NULL,
  PDG_COUNTRY_BIRTH VARCHAR(2) NOT NULL,
  PDG_REGION VARCHAR(100) NOT NULL,
  PDG_RES_STATE VARCHAR(100) NOT NULL,
  PDG_PRIM_INS VARCHAR(100) NOT NULL,
  PDG_SEC_INS VARCHAR(100) NOT NULL,
  PDG_LAST_USR_ID INT NOT NULL,
  PDG_LAST_CHANGE_DT DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  CONSTRAINT PDG_SPT_FK FOREIGN KEY (PDG_SPT_ID)
    REFERENCES STUDY_SITE_PARTICIPANTS (SPT_ID),
  CONSTRAINT PDG_LAST_USR_FK FOREIGN KEY (PDG_LAST_USR_ID)
    REFERENCES User (id)
);

CREATE TABLE IF NOT EXISTS TESTS (
  TES_ID INT NOT NULL PRIMARY KEY,
  TES_TEST_CD VARCHAR(20) NOT NULL UNIQUE,
  TES_TEST_NAMES VARCHAR(200) NOT NULL,
  TES_STATUS VARCHAR(20) NOT NULL,
  TES_LAST_USR_ID INT NOT NULL,
  TES_LAST_CHANGE_DT DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  CONSTRAINT TES_LAST_USR_FK FOREIGN KEY (TES_LAST_USR_ID)
    REFERENCES User (id)
);

CREATE TABLE IF NOT EXISTS TENANT_TESTS (
  TTE_ID INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
  TTE_TNT_ID INT NOT NULL,
  TTE_TEST_CD VARCHAR(20) NOT NULL UNIQUE,
  TTE_LAST_USR_ID INT NOT NULL,
  TTE_LAST_CHANGE_DT DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  UNIQUE KEY TTE_TNT_TES_UK (TTE_TNT_ID, TTE_TEST_CD),
  CONSTRAINT TTE_TNT_FK FOREIGN KEY (TTE_TNT_ID)
    REFERENCES TENANTS (TNT_ID),
  CONSTRAINT TTE_TEST_CD_FK FOREIGN KEY (TTE_TEST_CD)
    REFERENCES TESTS (TES_TEST_CD),
  CONSTRAINT TTE_LAST_USR_FK FOREIGN KEY (TTE_LAST_USR_ID)
    REFERENCES User (id)
);

CREATE TABLE IF NOT EXISTS MEDICATIONS (
  MED_ID INT NOT NULL PRIMARY KEY,
  MED_CD VARCHAR(20) NOT NULL UNIQUE,
  MED_NAMES VARCHAR(200) NOT NULL,
  MED_LAST_USR_ID INT NOT NULL,
  MED_LAST_CHANGE_DT DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  CONSTRAINT MED_LAST_USR_FK FOREIGN KEY (MED_LAST_USR_ID)
    REFERENCES User (id)
);

CREATE TABLE IF NOT EXISTS TENANT_MEDICATIONS (
  TME_ID INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
  TME_TNT_ID INT NOT NULL,
  TME_MED_CD VARCHAR(20) NOT NULL UNIQUE,
  TME_LAST_USR_ID INT NOT NULL,
  TME_LAST_CHANGE_DT DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  UNIQUE KEY TME_TNT_MED_UK (TME_TNT_ID, TME_MED_CD),
  CONSTRAINT TME_TNT_FK FOREIGN KEY (TME_TNT_ID)
    REFERENCES TENANTS (TNT_ID),
  CONSTRAINT TME_MED_CD_FK FOREIGN KEY (TME_MED_CD)
    REFERENCES MEDICATIONS (MED_CD),
  CONSTRAINT TME_LAST_USR_FK FOREIGN KEY (TME_LAST_USR_ID)
    REFERENCES User (id)
);

CREATE TABLE IF NOT EXISTS REFERRALS (
  REF_ID INT NOT NULL PRIMARY KEY,
  REF_CD VARCHAR(20) NOT NULL UNIQUE,
  REF_NAMES VARCHAR(200) NOT NULL,
  REF_LAST_USR_ID INT NOT NULL,
  REF_LAST_CHANGE_DT DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  CONSTRAINT REF_LAST_USR_FK FOREIGN KEY (REF_LAST_USR_ID)
    REFERENCES User (id)
);

CREATE TABLE IF NOT EXISTS TENANT_REFERRALS (
  TRE_ID INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
  TRE_TNT_ID INT NOT NULL,
  TRE_REF_CD VARCHAR(20) NOT NULL UNIQUE,
  TRE_LAST_USR_ID INT NOT NULL,
  TRE_LAST_CHANGE_DT DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  UNIQUE KEY TRE_TNT_REF_UK (TRE_TNT_ID, TRE_REF_CD),
  CONSTRAINT TRE_TNT_FK FOREIGN KEY (TRE_TNT_ID)
    REFERENCES TENANTS (TNT_ID),
  CONSTRAINT TRE_REF_CD_FK FOREIGN KEY (TRE_REF_CD)
    REFERENCES REFERRALS (REF_CD),
  CONSTRAINT TRE_LAST_USR_FK FOREIGN KEY (TRE_LAST_USR_ID)
    REFERENCES User (id)
);


CREATE TABLE IF NOT EXISTS ENCOUNTER_TEST_ORDERS (
  ETO_ID INT NOT NULL PRIMARY KEY,
  ETO_PEN_ID INT NOT NULL,
  ETO_TEST_CD VARCHAR(20) NOT NULL,
  ETO_ORD_PLACE_DT DATETIME NOT NULL,
  ETO_ORD_EFF_DT DATETIME,
  ETO_LAST_USR_ID INT NOT NULL,
  ETO_LAST_CHANGE_DT DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  CONSTRAINT ETO_TEST_FK FOREIGN KEY (ETO_TEST_CD)
    REFERENCES TESTS (TES_TEST_CD),
  CONSTRAINT ETO_LAST_USR_FK FOREIGN KEY (ETO_LAST_USR_ID)
    REFERENCES User (id)
);

CREATE TABLE IF NOT EXISTS ENCOUNTER_MED_ORDERS (
  EMO_ID INT NOT NULL PRIMARY KEY,
  EMO_PEN_ID INT NOT NULL,
  EMO_MED_CD VARCHAR(20) NOT NULL,
  EMO_ORD_DT DATETIME NOT NULL,
  EMO_LAST_USR_ID INT NOT NULL,
  EMO_LAST_CHANGE_DT DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  CONSTRAINT EMO_MED_FK FOREIGN KEY (EMO_MED_CD)
    REFERENCES MEDICATIONS (MED_CD),
  CONSTRAINT EMO_LAST_USR_FK FOREIGN KEY (EMO_LAST_USR_ID)
    REFERENCES User (id)
);

CREATE TABLE IF NOT EXISTS ENCOUNTER_REFERRALS (
  ERE_ID INT NOT NULL PRIMARY KEY,
  ERE_PEN_ID INT NOT NULL,
  ERE_REF_CD VARCHAR(20) NOT NULL,
  ERE_REF_DT DATETIME NOT NULL,
  ERE_LAST_USR_ID INT NOT NULL,
  ERE_LAST_CHANGE_DT DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  CONSTRAINT ERE_REF_FK FOREIGN KEY (ERE_REF_CD)
    REFERENCES REFERRALS (REF_CD),
  CONSTRAINT ERE_LAST_USR_FK FOREIGN KEY (ERE_LAST_USR_ID)
    REFERENCES User (id)
);

CREATE TABLE IF NOT EXISTS QUESTION_LIBRARY (
  QLY_ID INT NOT NULL PRIMARY KEY,
  QLY_TNT_ID INT NOT NULL,
  QLY_LIB_NAME VARCHAR(50) NOT NULL,
  QLY_LIB_DESC VARCHAR(1000) NOT NULL,
  QLY_LAST_USR_ID INT NOT NULL,
  QLY_LAST_CHANGE_DT DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  UNIQUE KEY QLY_TNT_LIB_NAME_UK (QLY_TNT_ID, QLY_LIB_NAME),
  CONSTRAINT QLY_LAST_USR_FK FOREIGN KEY (QLY_LAST_USR_ID)
    REFERENCES User (id)
);

